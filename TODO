Parse the command list to start the invasion: func hajime:zombie.go
* Start the invasion
* Send back stats 


Do something with the message to store the stats that the zombies will
be sending back: func start:master.go
VALS

implement the config file parsing to handle many use cases, then go
and handle the semantics with the slave behaviour, then handle the
message passing format between the slaves to the master (for real
time results)
then i can work on working on the stats, use ncurses to get realtime graphs


features:
web front-end
   

* Send back data constantly to get real-time graphs.
* max-users in config
* time in config
* Every time a run finishes, tell a chan that it's finished, decrement current users.
  - if current users < max users, then another user can be created (users being a command.)
  - 
